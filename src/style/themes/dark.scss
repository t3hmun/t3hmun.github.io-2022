@use "sass:color";
@use "sass:math";
@use "../normalize";

//
// Sizes
//

// The default size of text and the size that all other sizes are calculated from.
$base-size: 1.1rem;

// Space from the edge of the screen. A _small_ gutter improves readability.
$gutter: math.div($base-size, 4);

// The max width for pure text content.
// I want roughly 60 characters per line for heavy reading.
// Normal fonts have a height width ratio of around 2.2:1
// The height is multiplied to achieve a rough CPL.
$reading-width: $base-size * 30;

// This is the max with for any content, including large images, code and titles.
// These kinds of content like to exploit as much space as possible.
// However using more than double the reading width looks clumsy and confusing.
$content-width: $reading-width * 2;

// Special blocks of text such as lists need more space to be properly readable.
$middle-width: $reading-width * 1.5;

// So roughly 1.5 line spacing. Affects maximum header sizes via $header-line-height.
$line-height: $base-size * 1.5;

// A border size that will almost certainly be 1px (unless base size is above 1rem).
$basic-border: math.div($base-size, 16);

// These shadows are used to make the header levels more obvious.
$h1-shadow: $basic-border * 3;
$h2-shadow: $basic-border * 2;
$h3-shadow: $basic-border * 1;
$h4-shadow: $basic-border * 1;
$h5-shadow: $basic-border * 1;
$h6-shadow: $basic-border * 1;

$header-line-height-large: $line-height * 2;
$header-line-height-small: $line-height * 1.5;
$masthead-line-height: $line-height * 3;

// This is FONT size.
// The masthead is not a header, its just a bit of text at the top of the page.
$masthead-size: $base-size * 3;
$h1-size: $base-size * 2.4; // Must be less than $header-line-height ($base-size*3 at time of writing).
$h2-size: $base-size * 2.1;
$h3-size: $base-size * 1.9;
$h4-size: $base-size * 1.6;
$h5-size: $base-size * 1.3;
$h6-size: $base-size * 1.1;
$muted-size: $base-size * 0.9;

$blockquote-side-line: math.div($base-size, 2);
$syntax-border-thickness: math.div($base-size, 16);
$bullet-padding: $base-size;
$text-weight: 300;
$header-weight: 300;

//
// Colours
//

$back-colour: #333 !default;
$fore-colour: #eee !default;
$text-colour: $fore-colour;
$theme-colour: rgb(255, 162, 55);
$muted-colour: #b15f02e4;
$link-colour: #80b418;

$link-hover-colour: $theme-colour;

$muted-back-colour: (color.mix($theme-colour, $back-colour, 10%)) !default;
$muted-fore-colour: color.scale(
  color.mix($theme-colour, $text-colour, 50%),
  $lightness: -10%
) !default;

$h1-colour: $theme-colour;
$h2-colour: $theme-colour;
$h3-colour: color.mix($text-colour, $theme-colour, 30%);
$h4-colour: color.mix($text-colour, $theme-colour, 60%);
$h5-colour: color.mix($text-colour, $theme-colour, 90%);
$h6-colour: color.mix($text-colour, $theme-colour, 100%);

$colours: (
  "text": $text-colour,
  "fore": $fore-colour,
  "back": $back-colour,
  "muted": $muted-colour,
  "link": $link-colour,
  "muted-fore": $muted-fore-colour,
  "muted-back": $muted-back-colour,
  "h1": $h1-colour,
  "h2": $h2-colour,
  "h3": $h3-colour,
  "h4": $h4-colour,
  "h5": $h5-colour,
  "h6": $h6-colour,
);

$main-font: sans-serif;
$mono-font: monospace;
$code-font: monospace;

// Make all colours CSS variables so they can be swapped out smoothly by JS.
:root {
  @each $name, $value in $colours {
    --#{$name}-colour: #{$value};
  }
}

:root {
  color: var(--fore-colour);
  background-color: var(--back-colour);
  font-size: $base-size;
  font-family: $main-font;
  font-weight: $text-weight;
}

body {
  // Auto margin should centre the body.
  margin: 0 auto;

  // Stops content stretching excessively on wide windows.
  max-width: $content-width;

  // Universal line height creates a spacing rhythm, feels nicer.
  line-height: $line-height;
}

p {
  max-width: $reading-width;
  display: block;
  margin: $line-height auto;
  padding: 0 $gutter;
}

ul,
ol {
  max-width: $reading-width;
  display: block;
  margin: $line-height auto;
  padding: 0 $gutter;
}

code {
  font-family: $code-font;
  color: var(--muted-fore-colour);
  display: inline-block;
}

a {
  text-decoration: none;
  color: var(--link-colour);
}

a:hover {
  color: var(--link-hover-colour);
}

img {
  // Causes images to shrink down to small screens.
  // For mobile friendly a zoom option is nice, though no idea how to make that work.
  width: 100%;
}

blockquote,
dl {
  max-width: $middle-width;
  display: block;
  margin: $gutter auto;
  padding: 0 $gutter;
  background: var(--muted-back-colour);

  // Reset p to fit the element instead of reading-width.
  p {
    max-width: none;
    margin: 0;
    padding: 0;
  }
}

table {
  // Default table is centred and allowed to be large.
  max-width: $content-width;
  margin: $gutter auto;
}

blockquote {
  // The fat line on the left that sets out a blockquote.
  border-left: solid var(--blockquote-side-line var(--muted-fore-colour));
}

// Most of the styling for pre is done by the syntax stylesheet.
pre {
  // Block display with auto margins centres the block in the screen.
  // Vertical margins to space elements.
  // Add padding to maintain a gutter.
  display: block;
  margin: $gutter auto;
  padding: 0 $gutter;
  font-family: $code-font;
  border: solid $syntax-border-thickness var(--muted-back-colour);
  overflow-x: auto;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: $header-weight;
  padding: 0 $gutter;
  margin: $line-height 0;
}

h1,
h2,
h3 {
  line-height: $header-line-height-large;
}
h4,
h5,
h6 {
  line-height: $header-line-height-small;
}

// h1 {
//   font-size: $h1-size;
//   font-weight: $h1-weight;
//   color: var(--h1-colour);
//   margin-right: $h1-shadow;
//   // Box shadows don't affect box-model so the margin does not need to be recalculated.
//   box-shadow: $h1-shadow $h1-shadow 0 var(--theme-colour);
// }

// This version has a background
h1 {
  text-align: center;
  font-size: $h1-size;
  color: var(--h1-colour);
  background-color: var(--muted-back-colour);
  margin-right: $h1-shadow;
  // Box shadows don't affect box-model so the margin does not need to be recalculated.
  box-shadow: 0 0 0 var(--theme-colour);
}

h2 {
  font-size: $h2-size;
  color: var(--h2-colour);
  margin-right: $h2-shadow;
  box-shadow: 0 $h2-shadow 0 var(--h2-colour);
}

h3 {
  font-size: $h3-size;
  color: var(--h3-colour);
  box-shadow: 0 $h3-shadow 0 var(--h3-colour);
}

h4 {
  font-size: $h4-size;
  color: var(--h4-colour);
  box-shadow: 0 $h4-shadow 0 var(--h4-colour);
}

h5 {
  font-size: $h5-size;
  color: var(--h5-colour);
  box-shadow: 0 $h5-shadow 0 var(--h5-colour);
}

h6 {
  font-size: $h6-size;
  color: var(--h6-colour);
  box-shadow: 0 $h6-shadow 0 var(--h6-colour);
}

//
// Style Classes
//

.hatch-box {
  background: repeating-linear-gradient(
    120deg,
    var(--back-colour),
    var(--back-colour) 3px,
    var(--muted-back-colour) 2px,
    var(--muted-back-colour) 4px
  );
}

//
// Utility Classes
//

.reading-width {
  // This class is used for very big images.
  max-width: $reading-width;
}

.content-width {
  // This class is used for very big images.
  max-width: $content-width;
}

.middle-width {
  // This class is used for big images.
  max-width: $middle-width;
}

//
// Generated Utility Classes
//

$sizes: (
  "base": $base-size,
  "masthead": $masthead-size,
  "muted": $muted-size,
);

@each $name, $size in $sizes {
  .size-#{$name} {
    font-size: $size;
  }
}

@each $name, $colour in $colours {
  .bg-#{$name} {
    background-color: $colour;
  }
  .fg-#{$name} {
    color: $colour;
  }
}
